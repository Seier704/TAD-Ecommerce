-- --------------------------------------------------------------------------
-- SCRIPT: 02_crear_tablas.sql
-- Descripción: Script para la creación de todas las tablas del esquema ECOMMERCE_FRAMEWORK.
--              Incluye tablas OLTP y tablas de Data Warehouse (Dimensiones y Hechos).
-- Ejecutar como: ECOMMERCE_FRAMEWORK
-- --------------------------------------------------------------------------

PROMPT Iniciando la creación de tablas para ECOMMERCE_FRAMEWORK...

-- --------------------------------------------------------------------------
-- Tablas del Sistema Transaccional (OLTP)
-- --------------------------------------------------------------------------

-- Tabla TIENDAS.
CREATE TABLE tiendas (
    tienda_id           NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre              VARCHAR2(100) NOT NULL,
    url_dominio         VARCHAR2(100),
    fecha_creacion      DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT pk_tiendas PRIMARY KEY (tienda_id),
    CONSTRAINT uq_tiendas_nombre UNIQUE (nombre),
    CONSTRAINT uq_tiendas_url UNIQUE (url_dominio)
);
PROMPT Tabla TIENDAS creada.

-- Tabla ROLES.
CREATE TABLE roles (
    rol_id              NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre_rol          VARCHAR2(50) NOT NULL,
    CONSTRAINT pk_roles PRIMARY KEY (rol_id),
    CONSTRAINT uq_roles_nombre UNIQUE (nombre_rol)
);
PROMPT Tabla ROLES creada.

-- Tabla USUARIOS.
CREATE TABLE usuarios (
    usuario_id          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    tienda_id           NUMBER NOT NULL, -- Cada usuario pertenece a UNA tienda.
    email               VARCHAR2(100) NOT NULL,
    password_hash       VARCHAR2(255) NOT NULL,
    nombre              VARCHAR2(50),
    apellido            VARCHAR2(50),
    fecha_registro      DATE DEFAULT SYSDATE NOT NULL,
    oracle_username     VARCHAR2(128),
    CONSTRAINT pk_usuarios PRIMARY KEY (usuario_id),
    CONSTRAINT fk_usuarios_tienda FOREIGN KEY (tienda_id) REFERENCES tiendas(tienda_id) ON DELETE CASCADE,
    CONSTRAINT uq_usuarios_email_tienda UNIQUE (tienda_id, email),
    CONSTRAINT uq_usuarios_oracle_user UNIQUE (oracle_username)
);
GRANT SELECT ON ECOMMERCE_FRAMEWORK.usuarios TO SYS;
PROMPT Tabla USUARIOS creada y configurada.

-- Tabla PRODUCTOS.
CREATE TABLE productos (
    producto_id         NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    tienda_id           NUMBER NOT NULL,
    nombre              VARCHAR2(255) NOT NULL,
    descripcion         CLOB,
    precio              NUMBER(10, 2) NOT NULL,
    stock               NUMBER(9) DEFAULT 0 NOT NULL,
    sku                 VARCHAR2(50),
    fecha_creacion      DATE DEFAULT SYSDATE NOT NULL,
    fecha_actualizacion DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT pk_productos PRIMARY KEY (producto_id),
    CONSTRAINT fk_productos_tienda FOREIGN KEY (tienda_id) REFERENCES tiendas(tienda_id) ON DELETE CASCADE,
    CONSTRAINT chk_productos_precio CHECK (precio > 0),
    CONSTRAINT chk_productos_stock CHECK (stock >= 0),
    CONSTRAINT uq_productos_sku_tienda UNIQUE (tienda_id, sku)
);
PROMPT Tabla PRODUCTOS creada.

-- Tabla USUARIO_ROLES.
CREATE TABLE usuario_roles (
    usuario_id          NUMBER NOT NULL,
    rol_id              NUMBER NOT NULL,
    CONSTRAINT pk_usuario_roles PRIMARY KEY (usuario_id, rol_id),
    CONSTRAINT fk_usuarioroles_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE,
    CONSTRAINT fk_usuarioroles_rol FOREIGN KEY (rol_id) REFERENCES roles(rol_id) ON DELETE CASCADE
);
PROMPT Tabla USUARIO_ROLES creada.

-- Tabla CATEGORIAS.
CREATE TABLE categorias (
    categoria_id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    tienda_id           NUMBER NOT NULL,
    nombre              VARCHAR2(100) NOT NULL,
    descripcion         CLOB,
    CONSTRAINT pk_categorias PRIMARY KEY (categoria_id),
    CONSTRAINT fk_categorias_tienda FOREIGN KEY (tienda_id) REFERENCES tiendas(tienda_id) ON DELETE CASCADE,
    CONSTRAINT uq_categorias_nombre_tienda UNIQUE (tienda_id, nombre)
);
PROMPT Tabla CATEGORIAS creada.

-- Tabla PRODUCTO_CATEGORIAS.
CREATE TABLE producto_categorias (
    producto_id         NUMBER NOT NULL,
    categoria_id        NUMBER NOT NULL,
    CONSTRAINT pk_producto_categorias PRIMARY KEY (producto_id, categoria_id),
    CONSTRAINT fk_prodcat_producto FOREIGN KEY (producto_id) REFERENCES productos(producto_id) ON DELETE CASCADE,
    CONSTRAINT fk_prodcat_categoria FOREIGN KEY (categoria_id) REFERENCES categorias(categoria_id) ON DELETE CASCADE
);
PROMPT Tabla PRODUCTO_CATEGORIAS creada.

-- Tabla DIRECCIONES.
CREATE TABLE direcciones (
    direccion_id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    usuario_id          NUMBER NOT NULL,
    calle               VARCHAR2(255) NOT NULL,
    numero              VARCHAR2(20), -- Añadido 'numero'
    comuna              VARCHAR2(100), -- Añadido 'comuna'
    ciudad              VARCHAR2(100) NOT NULL,
    region              VARCHAR2(100),
    codigo_postal       VARCHAR2(20),
    pais                VARCHAR2(50) NOT NULL,
    CONSTRAINT pk_direcciones PRIMARY KEY (direccion_id),
    CONSTRAINT fk_direcciones_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id) ON DELETE CASCADE
);
PROMPT Tabla DIRECCIONES creada.

-- Tabla PEDIDOS.
CREATE TABLE pedidos (
    pedido_id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    usuario_id           NUMBER NOT NULL,
    tienda_id            NUMBER NOT NULL,
    direccion_envio_id   NUMBER,
    fecha_pedido         DATE DEFAULT SYSDATE NOT NULL,
    estado_pedido        VARCHAR2(50) NOT NULL, -- Corregido: 'estado' a 'estado_pedido'
    total                NUMBER(12, 2) DEFAULT 0 NOT NULL,
    CONSTRAINT pk_pedidos PRIMARY KEY (pedido_id, fecha_pedido),
    CONSTRAINT fk_pedidos_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(usuario_id),
    CONSTRAINT fk_pedidos_tienda FOREIGN KEY (tienda_id) REFERENCES tiendas(tienda_id),
    CONSTRAINT fk_pedidos_direccion FOREIGN KEY (direccion_envio_id) REFERENCES direcciones(direccion_id) ON DELETE SET NULL,
    CONSTRAINT chk_pedidos_estado CHECK (estado_pedido IN ('PENDIENTE', 'PROCESANDO', 'ENVIADO', 'ENTREGADO', 'CANCELADO'))
)
PARTITION BY RANGE (fecha_pedido)
(
    PARTITION p_pedidos_2024 VALUES LESS THAN (TO_DATE('01-01-2025', 'DD-MM-YYYY')),
    PARTITION p_pedidos_2025 VALUES LESS THAN (TO_DATE('01-01-2026', 'DD-MM-YYYY')),
    PARTITION p_pedidos_max VALUES LESS THAN (MAXVALUE)
);
PROMPT Tabla PEDIDOS creada y particionada.

-- Tabla DETALLES_PEDIDO.
CREATE TABLE detalles_pedido (
    detalle_id          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    pedido_id           NUMBER NOT NULL,
    fecha_pedido_fk     DATE NOT NULL,
    producto_id         NUMBER NOT NULL,
    cantidad            NUMBER(5) NOT NULL,
    precio_unitario     NUMBER(10, 2) NOT NULL,
    CONSTRAINT pk_detalles_pedido PRIMARY KEY (detalle_id),
    CONSTRAINT fk_detalles_pedido_pedido FOREIGN KEY (pedido_id, fecha_pedido_fk) REFERENCES pedidos(pedido_id, fecha_pedido) ON DELETE CASCADE,
    CONSTRAINT fk_detalles_pedido_producto FOREIGN KEY (producto_id) REFERENCES productos(producto_id)
)
PARTITION BY REFERENCE (fk_detalles_pedido_pedido);
PROMPT Tabla DETALLES_PEDIDO creada y particionada por referencia.

-- Tabla PAGOS.
CREATE TABLE pagos (
    pago_id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    pedido_id           NUMBER NOT NULL,
    fecha_pedido_fk     DATE NOT NULL,
    monto               NUMBER(12, 2) NOT NULL,
    fecha_pago          DATE DEFAULT SYSDATE NOT NULL,
    metodo_pago         VARCHAR2(50),
    estado_pago         VARCHAR2(20) NOT NULL,
    CONSTRAINT pk_pagos PRIMARY KEY (pago_id),
    CONSTRAINT uq_pagos_pedido UNIQUE (pedido_id, fecha_pedido_fk),
    CONSTRAINT fk_pagos_pedido FOREIGN KEY (pedido_id, fecha_pedido_fk) REFERENCES pedidos(pedido_id, fecha_pedido) ON DELETE CASCADE,
    CONSTRAINT chk_pagos_estado CHECK (estado_pago IN ('COMPLETADO', 'FALLIDO', 'REEMBOLSADO'))
)
PARTITION BY REFERENCE (fk_pagos_pedido);
PROMPT Tabla PAGOS creada y particionada por referencia.

-- Tabla de auditoría
CREATE TABLE tabla_auditoria (
    auditoria_id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre_tabla        VARCHAR2(100) NOT NULL,
    tipo_operacion      VARCHAR2(10) NOT NULL,
    registro_id         NUMBER,
    valores_antiguos    CLOB,
    valores_nuevos      CLOB,
    usuario_accion      VARCHAR2(100) DEFAULT USER NOT NULL,
    fecha_accion        DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT pk_tabla_auditoria PRIMARY KEY (auditoria_id),
    CONSTRAINT chk_tipo_operacion CHECK (tipo_operacion IN ('INSERT', 'UPDATE', 'DELETE'))
)
PARTITION BY RANGE (fecha_accion)
(
    PARTITION p_2024 VALUES LESS THAN (TO_DATE('01-01-2025', 'DD-MM-YYYY')),
    PARTITION p_2025 VALUES LESS THAN (TO_DATE('01-01-2026', 'DD-MM-YYYY')),
    PARTITION p_2026 VALUES LESS THAN (TO_DATE('01-01-2027', 'DD-MM-YYYY')),
    PARTITION p_max  VALUES LESS THAN (MAXVALUE)
);
PROMPT Tabla de auditoría creada.

-- --------------------------------------------------------------------------
-- Tablas de Data Warehouse (DW)
-- --------------------------------------------------------------------------

-- Dimensión de Tiempo (Nombres de columnas alineados con 08_triggers.sql)
CREATE TABLE Dim_Tiempo (
    fecha_id         NUMBER PRIMARY KEY,
    fecha            DATE NOT NULL,
    dia              NUMBER(2) NOT NULL,
    mes              NUMBER(2) NOT NULL,
    anio             NUMBER(4) NOT NULL, -- Corregido: 'año' a 'anio'
    trimestre        NUMBER(1) NOT NULL,
    nombre_mes       VARCHAR2(20) NOT NULL,
    dia_semana       VARCHAR2(20) NOT NULL,
    es_fin_semana    VARCHAR2(1) NOT NULL, -- Añadido: para ser poblado por extraer_dim_tiempo
    CONSTRAINT uq_dim_tiempo_fecha UNIQUE (fecha)
);
PROMPT Dimensión de tiempo creada.

-- Dimensión de Producto (Nombres de columnas alineados con 08_triggers.sql)
CREATE TABLE Dim_Producto (
    producto_dim_id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    producto_id          NUMBER NOT NULL,
    nombre_producto      VARCHAR2(255),
    descripcion_producto CLOB,
    precio_unitario_actual NUMBER(10,2),
    sku                  VARCHAR2(50),
    CONSTRAINT uq_dim_producto_id UNIQUE (producto_id)
);
PROMPT Dimensión de producto creada.

-- Dimensión de Usuario (Nombres de columnas alineados con 08_triggers.sql)
CREATE TABLE Dim_Usuario (
    usuario_dim_id       NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    usuario_id           NUMBER NOT NULL,
    email_usuario        VARCHAR2(100),
    nombre_completo_usuario VARCHAR2(100),
    CONSTRAINT uq_dim_usuario_id UNIQUE (usuario_id)
);
PROMPT Dimensión de usuario creada.

-- Dimensión de Tienda (Nombres de columnas alineados con 08_triggers.sql)
CREATE TABLE Dim_Tienda (
    tienda_dim_id        NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    tienda_id            NUMBER NOT NULL,
    nombre_tienda        VARCHAR2(100),
    url_dominio_tienda   VARCHAR2(100),
    CONSTRAINT uq_dim_tienda_id UNIQUE (tienda_id)
);
PROMPT Dimensión de tienda creada.

-- Tabla de Hechos de Ventas (Nombres de columnas alineados con 08_triggers.sql)
CREATE TABLE Hecho_Ventas (
    venta_id            NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    fecha_id            NUMBER NOT NULL,
    producto_dim_id     NUMBER NOT NULL,
    usuario_dim_id      NUMBER NOT NULL,
    tienda_dim_id       NUMBER NOT NULL,
    cantidad_vendida    NUMBER,
    monto_venta         NUMBER(12,2),
    -- Foreign Keys hacia las dimensiones
    CONSTRAINT fk_hv_tiempo    FOREIGN KEY (fecha_id)    REFERENCES Dim_Tiempo(fecha_id),
    CONSTRAINT fk_hv_producto  FOREIGN KEY (producto_dim_id)  REFERENCES Dim_Producto(producto_dim_id),
    CONSTRAINT fk_hv_usuario   FOREIGN KEY (usuario_dim_id)   REFERENCES Dim_Usuario(usuario_dim_id),
    CONSTRAINT fk_hv_tienda    FOREIGN KEY (tienda_dim_id)    REFERENCES Dim_Tienda(tienda_dim_id)
)
PARTITION BY RANGE (fecha_id)
(
    PARTITION p_ventas_2024 VALUES LESS THAN (20250101),
    PARTITION p_ventas_2025 VALUES LESS THAN (20260101),
    PARTITION p_ventas_2026 VALUES LESS THAN (20270101),
    PARTITION p_ventas_max VALUES LESS THAN (MAXVALUE)
);
PROMPT Tabla Hecho_Ventas creada y particionada.

PROMPT Todas las tablas han sido creadas exitosamente.
